{"version":3,"sources":["components/Post.jsx","components/PostForm.jsx","App.js","index.js","utils/DB.js"],"names":["Post","data","className","content","substring","title","format","postDate","PostForm","onPost","useState","setContent","processing","setProcessing","onSubmit","e","preventDefault","addPost","res","disabled","htmlFor","name","maxLength","placeholder","id","rows","onChange","target","value","App","posts","setPosts","useEffect","refreshPosts","getPosts","reverse","map","post","_id","ReactDOM","render","document","getElementById","url","exports","callback","fetch","then","status","json","catch","err","console","log","method","headers","body","JSON","stringify"],"mappings":"qNAGe,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAC3B,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mBAAGA,UAAU,YAAb,SAAyB,cAAC,IAAD,UAAUD,EAAKE,QAAQC,UAAU,EAAG,SAC7D,4BAAYF,UAAU,kBAAtB,SACI,wBAAQA,UAAU,oBAAlB,SACI,wBAAOA,UAAU,aAAjB,yBACa,sBAAMG,MAAM,eAAZ,SAA2B,cAAC,IAAD,CAAQC,OAAO,mBAAf,SAAgCL,EAAKM,yBCRtF,SAASC,EAAT,GAA+B,IAAXC,EAAU,EAAVA,OAAU,EAEXC,mBAAS,IAFE,mBAElCP,EAFkC,KAEzBQ,EAFyB,OAGLD,oBAAS,GAHJ,mBAGlCE,EAHkC,KAGtBC,EAHsB,KAwBzC,OACI,sBAAMX,UAAU,OAAOY,SAhBN,SAACC,GAClBA,EAAEC,iBAEc,KAAZb,IACJU,GAAc,GAEdI,kBAAQd,GAAS,SAACe,GACVA,IACAT,IACAE,EAAW,KAEfE,GAAc,QAKlB,SACI,0BAAUM,SAAUP,EAApB,SACI,sBAAKV,UAAU,aAAf,UACI,sBAAKA,UAAU,yDAAf,UACI,uBAAOA,UAAU,6BAA6BkB,QAAQ,eAAtD,iCACA,wBAAQlB,UAAU,yBAAyBiB,SAAsB,KAAZhB,EAArD,uBAEJ,0BAAUkB,KAAK,UAAUC,UAAW,IAAKpB,UAAU,eAAeqB,YAAY,uBAAuBC,GAAG,eAAeC,KAAK,IAAIC,SA3BpH,SAACX,GACzBJ,EAAWI,EAAEY,OAAOC,QA0BuJA,MAAOzB,W,YCE3K0B,MA3Bf,WAAgB,IAAD,EAEenB,mBAAS,IAFxB,mBAEJoB,EAFI,KAEGC,EAFH,KAIXC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAe,WACjBC,oBAAS,SAACJ,GACFA,GAAOC,EAASD,EAAMK,eAIlC,OACI,sBAAKjC,UAAU,iBAAf,UACI,cAACM,EAAD,CAAUC,OAAQwB,IAClB,uBACA,qBAAK/B,UAAU,eAAf,SAEQ4B,EAAMM,KAAI,SAACC,GAAD,OAAW,cAACrC,EAAD,CAAqBC,KAAMoC,GAAhBA,EAAKC,cC1BzDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U,gBCHjD,IAAMC,EAAM,6FAkCZC,EAAQV,SAhCS,SAACW,GACdC,MAAMH,GAAKI,MAAK,SAAA7B,GACZ,GAAmB,MAAfA,EAAI8B,OAAgB,OAAO9B,EAAI+B,UAElCF,MAAK,SAAA9C,GACF4C,EAAS5C,MACViD,OAAM,SAAAC,GACLN,GAAS,GACTO,QAAQC,IAAIF,OA0BxBP,EAAQ3B,QAtBQ,SAACd,EAAS0C,GACtBC,MAAMH,EACF,CACIW,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEvD,QAASA,MAEtC4C,MAAK,SAAA7B,GAAG,OAAIA,EAAI+B,UACbF,MAAK,SAAA7B,GACFkC,QAAQC,IAAInC,GACZ2B,EAAS3B,MACVgC,OAAM,SAAAC,GACLN,GAAS,GACTO,QAAQC,IAAIF,S","file":"static/js/main.98cb943b.chunk.js","sourcesContent":["import Moment from 'react-moment';\nimport Linkify from 'react-linkify';\n\nexport default function Post({ data }) {\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <p className=\"card-text\"><Linkify>{data.content.substring(0, 100)}</Linkify></p>\n                <blockquote className=\"blockquote mb-0\">\n                    <footer className=\"blockquote-footer\">\n                        <small className=\"text-muted\">\n                            Posté le <cite title=\"Source Title\"><Moment format=\"DD/MM à HH:mm\">{data.postDate}</Moment></cite>\n                        </small>\n                    </footer>\n                </blockquote>\n            </div>\n        </div>\n    )\n}","import { useState } from \"react\";\nimport { addPost } from '../utils/DB';\n\nexport default function PostForm({ onPost }) {\n\n    const [content, setContent] = useState(\"\");\n    const [processing, setProcessing] = useState(false);\n\n    const handleContentChange = (e) => {\n        setContent(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if (content === \"\") return;\n        setProcessing(true);\n\n        addPost(content, (res) => {\n            if (res) {\n                onPost();\n                setContent(\"\");\n            }\n            setProcessing(false);\n        })\n    }\n\n    return (\n        <form className=\"mb-3\" onSubmit={handleSubmit}>\n            <fieldset disabled={processing}>\n                <div className=\"form-group\">\n                    <div className=\"d-flex justify-content-between align-items-center mb-2\">\n                        <label className=\"mb-0 font-weight-bold mt-2\" htmlFor=\"post-content\">Contenu à poster</label>\n                        <button className=\"btn btn-success btn-sm\" disabled={content !== \"\" ? false : true}>Poster</button>\n                    </div>\n                    <textarea name=\"content\" maxLength={255} className=\"form-control\" placeholder=\"Saisissez votre post\" id=\"post-content\" rows=\"3\" onChange={handleContentChange} value={content}></textarea>\n                </div>\n            </fieldset>\n        </form>\n    )\n}","import React, { useState, useEffect } from 'react';\n\nimport { getPosts } from './utils/DB';\n\nimport Post from './components/Post';\nimport PostForm from './components/PostForm';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n\n    const [posts, setPosts] = useState([]);\n\n    useEffect(() => {\n        refreshPosts();\n    }, []);\n\n    const refreshPosts = () => {\n        getPosts((posts) => {\n            if (posts) setPosts(posts.reverse());\n        });\n    }\n\n    return (\n        <div className=\"container mb-5\">\n            <PostForm onPost={refreshPosts} />\n            <hr />\n            <div className=\"card-columns\">\n                {\n                    posts.map((post) => (<Post key={post._id} data={post} />))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))","\nconst url = 'https://cross-origin.herokuapp.com/https://post-public.netlify.app/.netlify/functions/post';\n\nconst getPosts = (callback) => {\n    fetch(url).then(res => {\n        if (res.status === 200) return res.json();\n    })\n        .then(data => {\n            callback(data);\n        }).catch(err => {\n            callback(false);\n            console.log(err);\n        });\n}\n\nconst addPost = (content, callback) => {\n    fetch(url,\n        {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ content: content })\n        }\n    ).then(res => res.json())\n        .then(res => {\n            console.log(res);\n            callback(res);\n        }).catch(err => {\n            callback(false);\n            console.log(err);\n        });\n}\n\n\nexports.getPosts = getPosts;\n\nexports.addPost = addPost;"],"sourceRoot":""}